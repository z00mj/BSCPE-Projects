
-- Create or replace the admin delete user function
CREATE OR REPLACE FUNCTION admin_delete_user(target_user_id UUID)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result JSON;
    error_msg TEXT;
BEGIN
    -- Check if current user is admin
    IF NOT EXISTS (
        SELECT 1 FROM profiles 
        WHERE user_id = auth.uid() AND is_admin = true
    ) THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Unauthorized: Only admins can delete users'
        );
    END IF;

    -- Check if target user exists
    IF NOT EXISTS (
        SELECT 1 FROM auth.users WHERE id = target_user_id
    ) THEN
        RETURN json_build_object(
            'success', false,
            'error', 'User not found'
        );
    END IF;

    BEGIN
        -- Delete all user-related data in correct order (respecting foreign key constraints)
        
        -- Delete withdrawal notifications
        DELETE FROM withdrawal_notifications WHERE user_id = target_user_id;
        
        -- Delete deposit notifications  
        DELETE FROM deposit_notifications WHERE user_id = target_user_id;
        
        -- Delete receipt validations (via deposits)
        DELETE FROM receipt_validations WHERE deposit_id IN (
            SELECT id FROM deposits WHERE user_id = target_user_id
        );
        
        -- Delete withdrawals
        DELETE FROM withdrawals WHERE user_id = target_user_id;
        
        -- Delete deposits
        DELETE FROM deposits WHERE user_id = target_user_id;
        
        -- Delete quest rewards claimed
        DELETE FROM quest_rewards_claimed WHERE user_id = target_user_id;
        
        -- Delete daily quests
        DELETE FROM daily_quests WHERE user_id = target_user_id;
        
        -- Delete user activities
        DELETE FROM user_activities WHERE user_id = target_user_id;
        
        -- Delete user pets
        DELETE FROM user_pets WHERE user_id = target_user_id;
        
        -- Delete user eggs
        DELETE FROM user_eggs WHERE user_id = target_user_id;
        
        -- Delete game sessions
        DELETE FROM game_sessions WHERE user_id = target_user_id;
        
        -- Delete farming sessions
        DELETE FROM farming_sessions WHERE user_id = target_user_id;
        
        -- Delete earning history
        DELETE FROM earning_history WHERE user_id = target_user_id;
        
        -- Delete appeals
        DELETE FROM appeals WHERE user_id = target_user_id;
        
        -- Delete profile
        DELETE FROM profiles WHERE user_id = target_user_id;
        
        -- Finally delete the user from auth.users
        DELETE FROM auth.users WHERE id = target_user_id;
        
        result := json_build_object(
            'success', true,
            'message', 'User and all associated data deleted successfully',
            'user_id', target_user_id
        );
        
    EXCEPTION WHEN others THEN
        error_msg := SQLERRM;
        result := json_build_object(
            'success', false,
            'error', error_msg,
            'error_detail', SQLSTATE,
            'user_id', target_user_id
        );
    END;
    
    RETURN result;
END;
$$;

-- Grant execute permission to authenticated users (admin check is done inside function)
GRANT EXECUTE ON FUNCTION admin_delete_user(UUID) TO authenticated;
