
DECLARE
    quest_record RECORD;
    progress_increment DECIMAL := 0;
    current_progress DECIMAL;
    target_value DECIMAL;
    today_date DATE := CURRENT_DATE;
    current_itlog_balance DECIMAL;
    current_php_balance DECIMAL;
BEGIN
    -- Process each active quest for the user
    FOR quest_record IN (
        SELECT dq.id, dq.progress, dq.is_completed, qd.task_type, qd.target_value, qd.difficulty_tier
        FROM daily_quests dq
        JOIN quest_definitions qd ON dq.quest_definition_id = qd.id
        WHERE dq.user_id = p_user_id 
        AND dq.date = today_date
        AND dq.is_completed = FALSE
    ) LOOP
        progress_increment := 0;

        CASE quest_record.task_type
            -- Play any casino game once
            WHEN 'play_game' THEN
                IF p_activity_type = 'play_game' THEN
                    progress_increment := 1;
                END IF;

            -- Win 3 times in any game
            WHEN 'win_games' THEN
                IF p_activity_type = 'win_game' THEN
                    progress_increment := 1;
                END IF;

            -- Bet a total of at least X tokens
            WHEN 'total_bets' THEN
                IF p_activity_type = 'place_bet' THEN
                    progress_increment := p_activity_value;
                END IF;

            -- Try X different games
            WHEN 'different_games' THEN
                IF p_activity_type = 'play_game' THEN
                    -- Count unique games played today
                    SELECT COUNT(DISTINCT game_type) INTO progress_increment
                    FROM user_activities
                    WHERE user_id = p_user_id
                    AND activity_type = 'play_game'
                    AND DATE(created_at) = today_date;

                    -- Set progress to current unique game count
                    progress_increment := progress_increment - quest_record.progress;
                END IF;

            -- Accumulate daily winnings
            WHEN 'daily_winnings' THEN
                IF p_activity_type = 'win_game' THEN
                    progress_increment := p_activity_value;
                END IF;

            -- Lose streak and continue playing
            WHEN 'lose_streak_continue' THEN
                IF p_activity_type = 'lose_game' THEN
                    -- Check for 3 consecutive losses in any single game type
                    WITH recent_games AS (
                        SELECT activity_type, game_type, created_at
                        FROM user_activities
                        WHERE user_id = p_user_id
                        AND game_type = p_game_type
                        AND DATE(created_at) = today_date
                        AND activity_type IN ('win_game', 'lose_game')
                        ORDER BY created_at DESC
                        LIMIT 3
                    ),
                    consecutive_check AS (
                        SELECT COUNT(*) as total_games,
                               COUNT(*) FILTER (WHERE activity_type = 'lose_game') as consecutive_losses
                        FROM recent_games
                    )
                    SELECT 
                        CASE 
                            WHEN total_games = 3 AND consecutive_losses = 3 THEN 3
                            ELSE LEAST(consecutive_losses, 2)
                        END INTO progress_increment
                    FROM consecutive_check;

                    -- Adjust for current progress to avoid double counting
                    progress_increment := progress_increment - quest_record.progress;
                END IF;

            -- Play duration
            WHEN 'play_duration' THEN
                IF p_activity_type = 'game_session' THEN
                    progress_increment := p_activity_value; -- Duration in seconds
                END IF;

            -- Claim farming rewards
            WHEN 'claim_farming' THEN
                IF p_activity_type = 'claim_farming' THEN
                    progress_increment := 1;
                END IF;

            -- Stake PHP
            WHEN 'stake_php' THEN
                IF p_activity_type = 'stake_php' THEN
                    progress_increment := p_activity_value;
                END IF;

            -- Complete quests (count how many quests user has completed today)
            WHEN 'complete_quest' THEN
                IF p_activity_type = 'complete_quest' THEN
                    -- Count total completed quests for today
                    SELECT COUNT(*) INTO progress_increment
                    FROM daily_quests
                    WHERE user_id = p_user_id
                    AND date = today_date
                    AND is_completed = TRUE;

                    -- Set progress to current completed quest count (absolute value, not increment)
                    progress_increment := progress_increment;
                END IF;

            -- Deposit PHP
            WHEN 'deposit' THEN
                IF p_activity_type = 'deposit' AND (p_metadata->>'status')::text = 'approved' THEN
                    progress_increment := p_activity_value;
                ELSIF p_activity_type = 'balance_check' OR p_activity_type = 'fix_progress' THEN
                    -- For balance checks and progress fixes, check approved deposits directly
                    SELECT COALESCE(SUM(amount), 0) INTO progress_increment
                    FROM deposits
                    WHERE user_id = p_user_id
                    AND status = 'approved'
                    AND DATE(created_at) = today_date;

                    progress_increment := progress_increment - quest_record.progress;
                END IF;

            -- Deposit PHP (alternative task type)
            WHEN 'deposit_php' THEN
                IF p_activity_type = 'deposit' AND (p_metadata->>'status')::text = 'approved' THEN
                    progress_increment := p_activity_value;
                ELSIF p_activity_type = 'balance_check' OR p_activity_type = 'fix_progress' THEN
                    -- For balance checks and progress fixes, check approved deposits directly
                    SELECT COALESCE(SUM(amount), 0) INTO progress_increment
                    FROM deposits
                    WHERE user_id = p_user_id
                    AND status = 'approved'
                    AND DATE(created_at) = today_date;

                    progress_increment := progress_increment - quest_record.progress;
                END IF;

            -- Withdraw PHP
            WHEN 'withdraw_php' THEN
                IF p_activity_type = 'withdraw' AND (p_metadata->>'status')::text = 'approved' THEN
                    progress_increment := p_activity_value;
                END IF;

            -- Convert currency
            WHEN 'convert_currency' THEN
                IF p_activity_type = 'convert_currency' THEN
                    progress_increment := p_activity_value;
                END IF;

            -- Exchange ITLOG
            WHEN 'exchange_itlog' THEN
                IF p_activity_type = 'exchange_itlog' THEN
                    progress_increment := 1;
                END IF;

            -- Single bet amount
            WHEN 'single_bet' THEN
                IF p_activity_type = 'place_bet' AND p_activity_value >= quest_record.target_value THEN
                    progress_increment := quest_record.target_value; -- Complete the quest
                END IF;

            -- ITLOG balance check
            WHEN 'itlog_balance' THEN
                IF p_activity_type IN ('claim_farming', 'exchange_itlog', 'win_game', 'deposit', 'balance_check') THEN
                    -- Check current ITLOG balance using exact schema column name
                    SELECT COALESCE(itlog_tokens, 0) INTO progress_increment
                    FROM profiles
                    WHERE user_id = p_user_id;

                    -- Set progress to absolute balance value, not increment
                    progress_increment := progress_increment - quest_record.progress;
                END IF;

            -- All games in a day
            WHEN 'all_games' THEN
                IF p_activity_type = 'play_game' THEN
                    -- Count unique games played today
                    SELECT COUNT(DISTINCT game_type) INTO progress_increment
                    FROM user_activities
                    WHERE user_id = p_user_id
                    AND activity_type = 'play_game'
                    AND DATE(created_at) = today_date
                    AND game_type IN ('mines', 'wheel-of-fortune', 'fortune-reels', 'blackjack', 'dice-roll');

                    progress_increment := progress_increment - quest_record.progress;
                END IF;

            -- Farming streak
            WHEN 'farming_streak' THEN
                IF p_activity_type = 'claim_farming' THEN
                    progress_increment := 1;
                END IF;

            -- Maintain balance (special case)
            WHEN 'maintain_balance' THEN
                -- Check if user currently has required balance using exact schema column name
                SELECT COALESCE(php_balance, 0) INTO current_php_balance
                FROM profiles
                WHERE user_id = p_user_id;

                IF current_php_balance >= quest_record.target_value THEN
                    progress_increment := quest_record.target_value; -- Complete quest
                END IF;

            -- Single game win
            WHEN 'single_game_win' THEN
                IF p_activity_type = 'win_game' AND p_activity_value >= quest_record.target_value THEN
                    progress_increment := quest_record.target_value; -- Complete the quest
                END IF;

            ELSE
                progress_increment := 0;
        END CASE;

        -- Update quest progress if there's an increment
        IF progress_increment > 0 THEN
            -- For complete_quest type, use absolute value instead of increment
            IF quest_record.task_type = 'complete_quest' THEN
                current_progress := progress_increment;
            ELSE
                current_progress := quest_record.progress + progress_increment;
            END IF;

            target_value := quest_record.target_value;

            -- Ensure progress doesn't exceed target
            IF current_progress >= target_value THEN
                current_progress := target_value;

                UPDATE daily_quests
                SET progress = current_progress, is_completed = TRUE
                WHERE id = quest_record.id;

                -- Track quest completion
                INSERT INTO user_activities (user_id, activity_type, activity_value, metadata)
                VALUES (p_user_id, 'complete_quest', 1, jsonb_build_object('quest_id', quest_record.id));

                -- Recursively check for quest completion dependent quests
                PERFORM update_quest_progress(p_user_id, 'complete_quest', 1, NULL, jsonb_build_object('quest_id', quest_record.id));
            ELSE
                UPDATE daily_quests
                SET progress = current_progress
                WHERE id = quest_record.id;
            END IF;
        END IF;
    END LOOP;
END;
